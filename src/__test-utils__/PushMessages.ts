// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.31.0
// source: PushMessages.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export interface IncomingPushMessageSignal {
  type?: IncomingPushMessageSignal_Type | undefined;
  source?: string | undefined;
  sourceDevice?: number | undefined;
  relay?: string | undefined;
  timestamp?:
    | number
    | undefined;
  /** Contains an encrypted PushMessageContent */
  message?: Uint8Array | undefined;
}

export enum IncomingPushMessageSignal_Type {
  UNKNOWN = 0,
  CIPHERTEXT = 1,
  KEY_EXCHANGE = 2,
  PREKEY_BUNDLE = 3,
  PLAINTEXT = 4,
  RECEIPT = 5,
  PREKEY_BUNDLE_DEVICE_CONTROL = 6,
  DEVICE_CONTROL = 7,
  UNRECOGNIZED = -1,
}

export function incomingPushMessageSignal_TypeFromJSON(object: any): IncomingPushMessageSignal_Type {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return IncomingPushMessageSignal_Type.UNKNOWN;
    case 1:
    case "CIPHERTEXT":
      return IncomingPushMessageSignal_Type.CIPHERTEXT;
    case 2:
    case "KEY_EXCHANGE":
      return IncomingPushMessageSignal_Type.KEY_EXCHANGE;
    case 3:
    case "PREKEY_BUNDLE":
      return IncomingPushMessageSignal_Type.PREKEY_BUNDLE;
    case 4:
    case "PLAINTEXT":
      return IncomingPushMessageSignal_Type.PLAINTEXT;
    case 5:
    case "RECEIPT":
      return IncomingPushMessageSignal_Type.RECEIPT;
    case 6:
    case "PREKEY_BUNDLE_DEVICE_CONTROL":
      return IncomingPushMessageSignal_Type.PREKEY_BUNDLE_DEVICE_CONTROL;
    case 7:
    case "DEVICE_CONTROL":
      return IncomingPushMessageSignal_Type.DEVICE_CONTROL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IncomingPushMessageSignal_Type.UNRECOGNIZED;
  }
}

export function incomingPushMessageSignal_TypeToJSON(object: IncomingPushMessageSignal_Type): string {
  switch (object) {
    case IncomingPushMessageSignal_Type.UNKNOWN:
      return "UNKNOWN";
    case IncomingPushMessageSignal_Type.CIPHERTEXT:
      return "CIPHERTEXT";
    case IncomingPushMessageSignal_Type.KEY_EXCHANGE:
      return "KEY_EXCHANGE";
    case IncomingPushMessageSignal_Type.PREKEY_BUNDLE:
      return "PREKEY_BUNDLE";
    case IncomingPushMessageSignal_Type.PLAINTEXT:
      return "PLAINTEXT";
    case IncomingPushMessageSignal_Type.RECEIPT:
      return "RECEIPT";
    case IncomingPushMessageSignal_Type.PREKEY_BUNDLE_DEVICE_CONTROL:
      return "PREKEY_BUNDLE_DEVICE_CONTROL";
    case IncomingPushMessageSignal_Type.DEVICE_CONTROL:
      return "DEVICE_CONTROL";
    case IncomingPushMessageSignal_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PushMessageContent {
  body?: string | undefined;
  attachments: PushMessageContent_AttachmentPointer[];
  group?: PushMessageContent_GroupContext | undefined;
  flags?: number | undefined;
}

export enum PushMessageContent_Flags {
  END_SESSION = 1,
  UNRECOGNIZED = -1,
}

export function pushMessageContent_FlagsFromJSON(object: any): PushMessageContent_Flags {
  switch (object) {
    case 1:
    case "END_SESSION":
      return PushMessageContent_Flags.END_SESSION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PushMessageContent_Flags.UNRECOGNIZED;
  }
}

export function pushMessageContent_FlagsToJSON(object: PushMessageContent_Flags): string {
  switch (object) {
    case PushMessageContent_Flags.END_SESSION:
      return "END_SESSION";
    case PushMessageContent_Flags.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PushMessageContent_AttachmentPointer {
  id?: number | undefined;
  contentType?: string | undefined;
  key?: Uint8Array | undefined;
}

export interface PushMessageContent_GroupContext {
  id?: Uint8Array | undefined;
  type?: PushMessageContent_GroupContext_Type | undefined;
  name?: string | undefined;
  members: string[];
  avatar?: PushMessageContent_AttachmentPointer | undefined;
}

export enum PushMessageContent_GroupContext_Type {
  UNKNOWN = 0,
  UPDATE = 1,
  DELIVER = 2,
  QUIT = 3,
  UNRECOGNIZED = -1,
}

export function pushMessageContent_GroupContext_TypeFromJSON(object: any): PushMessageContent_GroupContext_Type {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return PushMessageContent_GroupContext_Type.UNKNOWN;
    case 1:
    case "UPDATE":
      return PushMessageContent_GroupContext_Type.UPDATE;
    case 2:
    case "DELIVER":
      return PushMessageContent_GroupContext_Type.DELIVER;
    case 3:
    case "QUIT":
      return PushMessageContent_GroupContext_Type.QUIT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PushMessageContent_GroupContext_Type.UNRECOGNIZED;
  }
}

export function pushMessageContent_GroupContext_TypeToJSON(object: PushMessageContent_GroupContext_Type): string {
  switch (object) {
    case PushMessageContent_GroupContext_Type.UNKNOWN:
      return "UNKNOWN";
    case PushMessageContent_GroupContext_Type.UPDATE:
      return "UPDATE";
    case PushMessageContent_GroupContext_Type.DELIVER:
      return "DELIVER";
    case PushMessageContent_GroupContext_Type.QUIT:
      return "QUIT";
    case PushMessageContent_GroupContext_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseIncomingPushMessageSignal(): IncomingPushMessageSignal {
  return { type: 0, source: "", sourceDevice: 0, relay: "", timestamp: 0, message: new Uint8Array(0) };
}

export const IncomingPushMessageSignal: MessageFns<IncomingPushMessageSignal> = {
  encode(message: IncomingPushMessageSignal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined && message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.source !== undefined && message.source !== "") {
      writer.uint32(18).string(message.source);
    }
    if (message.sourceDevice !== undefined && message.sourceDevice !== 0) {
      writer.uint32(56).uint32(message.sourceDevice);
    }
    if (message.relay !== undefined && message.relay !== "") {
      writer.uint32(26).string(message.relay);
    }
    if (message.timestamp !== undefined && message.timestamp !== 0) {
      writer.uint32(40).uint64(message.timestamp);
    }
    if (message.message !== undefined && message.message.length !== 0) {
      writer.uint32(50).bytes(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IncomingPushMessageSignal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingPushMessageSignal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.source = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.sourceDevice = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.relay = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.timestamp = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.message = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncomingPushMessageSignal {
    return {
      type: isSet(object.type) ? incomingPushMessageSignal_TypeFromJSON(object.type) : 0,
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      sourceDevice: isSet(object.sourceDevice) ? globalThis.Number(object.sourceDevice) : 0,
      relay: isSet(object.relay) ? globalThis.String(object.relay) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      message: isSet(object.message) ? bytesFromBase64(object.message) : new Uint8Array(0),
    };
  },

  toJSON(message: IncomingPushMessageSignal): unknown {
    const obj: any = {};
    if (message.type !== undefined && message.type !== 0) {
      obj.type = incomingPushMessageSignal_TypeToJSON(message.type);
    }
    if (message.source !== undefined && message.source !== "") {
      obj.source = message.source;
    }
    if (message.sourceDevice !== undefined && message.sourceDevice !== 0) {
      obj.sourceDevice = Math.round(message.sourceDevice);
    }
    if (message.relay !== undefined && message.relay !== "") {
      obj.relay = message.relay;
    }
    if (message.timestamp !== undefined && message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.message !== undefined && message.message.length !== 0) {
      obj.message = base64FromBytes(message.message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingPushMessageSignal>, I>>(base?: I): IncomingPushMessageSignal {
    return IncomingPushMessageSignal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingPushMessageSignal>, I>>(object: I): IncomingPushMessageSignal {
    const message = createBaseIncomingPushMessageSignal();
    message.type = object.type ?? 0;
    message.source = object.source ?? "";
    message.sourceDevice = object.sourceDevice ?? 0;
    message.relay = object.relay ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.message = object.message ?? new Uint8Array(0);
    return message;
  },
};

function createBasePushMessageContent(): PushMessageContent {
  return { body: "", attachments: [], group: undefined, flags: 0 };
}

export const PushMessageContent: MessageFns<PushMessageContent> = {
  encode(message: PushMessageContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.body !== undefined && message.body !== "") {
      writer.uint32(10).string(message.body);
    }
    for (const v of message.attachments) {
      PushMessageContent_AttachmentPointer.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.group !== undefined) {
      PushMessageContent_GroupContext.encode(message.group, writer.uint32(26).fork()).join();
    }
    if (message.flags !== undefined && message.flags !== 0) {
      writer.uint32(32).uint32(message.flags);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PushMessageContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePushMessageContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.body = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.attachments.push(PushMessageContent_AttachmentPointer.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.group = PushMessageContent_GroupContext.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.flags = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PushMessageContent {
    return {
      body: isSet(object.body) ? globalThis.String(object.body) : "",
      attachments: globalThis.Array.isArray(object?.attachments)
        ? object.attachments.map((e: any) => PushMessageContent_AttachmentPointer.fromJSON(e))
        : [],
      group: isSet(object.group) ? PushMessageContent_GroupContext.fromJSON(object.group) : undefined,
      flags: isSet(object.flags) ? globalThis.Number(object.flags) : 0,
    };
  },

  toJSON(message: PushMessageContent): unknown {
    const obj: any = {};
    if (message.body !== undefined && message.body !== "") {
      obj.body = message.body;
    }
    if (message.attachments?.length) {
      obj.attachments = message.attachments.map((e) => PushMessageContent_AttachmentPointer.toJSON(e));
    }
    if (message.group !== undefined) {
      obj.group = PushMessageContent_GroupContext.toJSON(message.group);
    }
    if (message.flags !== undefined && message.flags !== 0) {
      obj.flags = Math.round(message.flags);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PushMessageContent>, I>>(base?: I): PushMessageContent {
    return PushMessageContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PushMessageContent>, I>>(object: I): PushMessageContent {
    const message = createBasePushMessageContent();
    message.body = object.body ?? "";
    message.attachments = object.attachments?.map((e) => PushMessageContent_AttachmentPointer.fromPartial(e)) || [];
    message.group = (object.group !== undefined && object.group !== null)
      ? PushMessageContent_GroupContext.fromPartial(object.group)
      : undefined;
    message.flags = object.flags ?? 0;
    return message;
  },
};

function createBasePushMessageContent_AttachmentPointer(): PushMessageContent_AttachmentPointer {
  return { id: 0, contentType: "", key: new Uint8Array(0) };
}

export const PushMessageContent_AttachmentPointer: MessageFns<PushMessageContent_AttachmentPointer> = {
  encode(message: PushMessageContent_AttachmentPointer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(9).fixed64(message.id);
    }
    if (message.contentType !== undefined && message.contentType !== "") {
      writer.uint32(18).string(message.contentType);
    }
    if (message.key !== undefined && message.key.length !== 0) {
      writer.uint32(26).bytes(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PushMessageContent_AttachmentPointer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePushMessageContent_AttachmentPointer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.id = longToNumber(reader.fixed64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.contentType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PushMessageContent_AttachmentPointer {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      contentType: isSet(object.contentType) ? globalThis.String(object.contentType) : "",
      key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(0),
    };
  },

  toJSON(message: PushMessageContent_AttachmentPointer): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.contentType !== undefined && message.contentType !== "") {
      obj.contentType = message.contentType;
    }
    if (message.key !== undefined && message.key.length !== 0) {
      obj.key = base64FromBytes(message.key);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PushMessageContent_AttachmentPointer>, I>>(
    base?: I,
  ): PushMessageContent_AttachmentPointer {
    return PushMessageContent_AttachmentPointer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PushMessageContent_AttachmentPointer>, I>>(
    object: I,
  ): PushMessageContent_AttachmentPointer {
    const message = createBasePushMessageContent_AttachmentPointer();
    message.id = object.id ?? 0;
    message.contentType = object.contentType ?? "";
    message.key = object.key ?? new Uint8Array(0);
    return message;
  },
};

function createBasePushMessageContent_GroupContext(): PushMessageContent_GroupContext {
  return { id: new Uint8Array(0), type: 0, name: "", members: [], avatar: undefined };
}

export const PushMessageContent_GroupContext: MessageFns<PushMessageContent_GroupContext> = {
  encode(message: PushMessageContent_GroupContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id.length !== 0) {
      writer.uint32(10).bytes(message.id);
    }
    if (message.type !== undefined && message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    for (const v of message.members) {
      writer.uint32(34).string(v!);
    }
    if (message.avatar !== undefined) {
      PushMessageContent_AttachmentPointer.encode(message.avatar, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PushMessageContent_GroupContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePushMessageContent_GroupContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.members.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.avatar = PushMessageContent_AttachmentPointer.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PushMessageContent_GroupContext {
    return {
      id: isSet(object.id) ? bytesFromBase64(object.id) : new Uint8Array(0),
      type: isSet(object.type) ? pushMessageContent_GroupContext_TypeFromJSON(object.type) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      members: globalThis.Array.isArray(object?.members) ? object.members.map((e: any) => globalThis.String(e)) : [],
      avatar: isSet(object.avatar) ? PushMessageContent_AttachmentPointer.fromJSON(object.avatar) : undefined,
    };
  },

  toJSON(message: PushMessageContent_GroupContext): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id.length !== 0) {
      obj.id = base64FromBytes(message.id);
    }
    if (message.type !== undefined && message.type !== 0) {
      obj.type = pushMessageContent_GroupContext_TypeToJSON(message.type);
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.members?.length) {
      obj.members = message.members;
    }
    if (message.avatar !== undefined) {
      obj.avatar = PushMessageContent_AttachmentPointer.toJSON(message.avatar);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PushMessageContent_GroupContext>, I>>(base?: I): PushMessageContent_GroupContext {
    return PushMessageContent_GroupContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PushMessageContent_GroupContext>, I>>(
    object: I,
  ): PushMessageContent_GroupContext {
    const message = createBasePushMessageContent_GroupContext();
    message.id = object.id ?? new Uint8Array(0);
    message.type = object.type ?? 0;
    message.name = object.name ?? "";
    message.members = object.members?.map((e) => e) || [];
    message.avatar = (object.avatar !== undefined && object.avatar !== null)
      ? PushMessageContent_AttachmentPointer.fromPartial(object.avatar)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
